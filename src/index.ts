import {app, BrowserWindow, ipcMain, shell} from 'electron';
// import log from 'electron-log';
import fs from 'fs';
import path from 'path';
import {
  batchDeleteTodo,
  batchFinishTodo,
  batchRecoverTodo,
  batchRemoveGroup,
  createTodoGroup,
  deleteTodoGroup,
  getTodoDetail,
  getTodoGroupList,
  updateTodoDeadline,
  updateTodoDetail,
  updateTodoGroup
} from 'src/apis/todo.api';

import {
  createTodo,
  getTodoList,
  updateTodoPriority,
  updateTodoProgress
} from './apis/todo.api';
import Database = require('better-sqlite3');
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

// log.transports.file.level = 'debug';
// log.transports.file.file = '/Users/wangyuzhen01/Desktop/logFile.log';

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    icon: path.join(__dirname, './assets/logo.ico'),
    webPreferences: {
      devTools: process.env.NODE_ENV === 'development',
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY
    }
  });

  mainWindow.webContents.setWindowOpenHandler(({url}) => {
    shell.openExternal(url);
    return {action: 'deny'};
  });

  // log.info(
  //   'MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY',
  //   MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY
  // );
  // log.info('MAIN_WINDOW_WEBPACK_ENTRY', MAIN_WINDOW_WEBPACK_ENTRY);

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // mainWindow.webContents.on(
  //   'did-fail-load',
  //   (event, errorCode, errorDescription) => {
  //     log.info('event', event);
  //     log.info('errCode', errorCode);
  //     log.info('errorDescription', errorDescription);
  //   }
  // );

  // log.info('app.isPackaged', app.isPackaged);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', async () => {
  // 获取用户数据目录路径
  const userDataPath = app.getPath('userData');

  // 创建保存数据库文件的目录
  const dbDirectory = path.join(userDataPath, 'databases');
  if (!fs.existsSync(dbDirectory)) {
    fs.mkdirSync(dbDirectory);
  }

  // 构造数据库文件路径
  const dbFilePath = path.join(dbDirectory, 'database.db');

  // log.info('dbFilePath', dbFilePath);

  // 连接 sqlite 数据库
  const db = new Database(dbFilePath);

  // 初始化的 sql 语句
  const initSql = `
  -- groups
  CREATE TABLE IF NOT EXISTS groups (
      id         INTEGER      PRIMARY KEY AUTOINCREMENT
                              UNIQUE
                              NOT NULL,
      title      TEXT (30)    NOT NULL,
      deleteTime INTEGER (13),
      parentId   INTEGER,
      createTime INTEGER (13) NOT NULL
  );


  -- 表：todos
  CREATE TABLE IF NOT EXISTS todos (
      id         INTEGER      PRIMARY KEY AUTOINCREMENT,
      name       TEXT (40)    NOT NULL,
      groupId     INTEGER      NOT NULL,
      createTime INTEGER (13) NOT NULL,
      updateTime INTEGER (13) NOT NULL,
      deleteTime BLOB (13),
      priority   INTEGER (1),
      progress   INTEGER (1),
      content    TEXT
  );
  `;

  db.exec(initSql);

  // 对 API 接口进行一层封装
  const apiWrapper = (fn) => {
    return (...args) => {
      args.unshift(db);
      return fn.apply(this, args);
    };
  };

  // 在主进程中使用 ipcMain.handle 监听事件
  ipcMain.handle('api:getTodoList', apiWrapper(getTodoList));
  ipcMain.handle('api:createTodo', apiWrapper(createTodo));
  ipcMain.handle('api:updateTodoPriority', apiWrapper(updateTodoPriority));
  ipcMain.handle('api:updateTodoProgress', apiWrapper(updateTodoProgress));
  ipcMain.handle('api:updateTodoDeadline', apiWrapper(updateTodoDeadline));
  ipcMain.handle('api:getTodoDetail', apiWrapper(getTodoDetail));
  ipcMain.handle('api:updateTodoDetail', apiWrapper(updateTodoDetail));
  ipcMain.handle('api:batchFinishTodo', apiWrapper(batchFinishTodo));
  ipcMain.handle('api:batchDeleteTodo', apiWrapper(batchDeleteTodo));
  ipcMain.handle('api:createTodoGroup', apiWrapper(createTodoGroup));
  ipcMain.handle('api:updateTodoGroup', apiWrapper(updateTodoGroup));
  ipcMain.handle('api:deleteTodoGroup', apiWrapper(deleteTodoGroup));
  ipcMain.handle('api:getTodoGroupList', apiWrapper(getTodoGroupList));
  ipcMain.handle('api:batchRecoverTodo', apiWrapper(batchRecoverTodo));
  ipcMain.handle('api:batchRemoveGroup', apiWrapper(batchRemoveGroup));

  createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
