import {app, BrowserWindow, ipcMain} from 'electron';
import fs from 'fs';
import path from 'path';

import {createTodo, getTodoList} from './apis/todo.api';
import Database = require('better-sqlite3');
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY
    }
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', async () => {
  // 获取用户数据目录路径
  const userDataPath = app.getPath('userData');
  console.log('userDataPath', userDataPath);

  // 创建保存数据库文件的目录
  const dbDirectory = path.join(userDataPath, 'databases');
  if (!fs.existsSync(dbDirectory)) {
    fs.mkdirSync(dbDirectory);
  }

  // 构造数据库文件路径
  const dbFilePath = path.join(dbDirectory, 'database.db');
  console.log('dbFilePath', dbFilePath);

  // 连接 sqlite 数据库
  const db = new Database(dbFilePath);

  // TODO: 需要在此处控制数据库版本，并初始化响应的表结构
  db.exec(`
    CREATE TABLE IF NOT EXISTS todos (
      id   INTEGER   PRIMARY KEY AUTOINCREMENT,
      name TEXT (40) NOT NULL
    );
  `);

  // 对 API 接口进行一层封装
  const apiWrapper = (fn) => {
    return (...args) => {
      args.unshift(db);
      return fn.apply(this, args);
    };
  };

  // 在主进程中使用 ipcMain.handle 监听事件
  ipcMain.handle('api:getTodoList', apiWrapper(getTodoList));
  ipcMain.handle('api:createTodo', apiWrapper(createTodo));

  createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
